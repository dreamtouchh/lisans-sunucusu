// Tesla Envanter Botu - Chrome Console'da √áalƒ±≈ütƒ±rƒ±n
// Bu bot 5 saniyede bir envanter kontrol√º yapar ve ara√ß bulduƒüunda otomatik rezerve eder

class TeslaInventoryBot {
    constructor() {
        this.isRunning = false;
        this.intervalId = null;
        this.checkInterval = 5000; // 5 saniye
        this.userInfo = {
            firstName: '',
            lastName: '',
            email: '',
            phone: '',
            zipCode: ''
        };
        
        console.log('üöó Tesla Envanter Botu hazƒ±r!');
        console.log('Kullanƒ±m: bot.setUserInfo({firstName: "Ad", lastName: "Soyad", email: "email@domain.com", phone: "5551234567", zipCode: "34000"})');
        console.log('Ba≈ülatmak i√ßin: bot.start()');
        console.log('Durdurmak i√ßin: bot.stop()');
    }
    
    // Kullanƒ±cƒ± bilgilerini ayarla
    setUserInfo(info) {
        this.userInfo = { ...this.userInfo, ...info };
        console.log('‚úÖ Kullanƒ±cƒ± bilgileri g√ºncellendi:', this.userInfo);
        
        // Eksik bilgileri kontrol et
        const required = ['firstName', 'lastName', 'email', 'phone', 'zipCode'];
        const missing = required.filter(field => !this.userInfo[field]);
        
        if (missing.length > 0) {
            console.warn('‚ö†Ô∏è Eksik bilgiler:', missing.join(', '));
            return false;
        }
        return true;
    }
    
    // Sayfayƒ± yenile (sayfa yenilenmeden AJAX ile)
    async refreshInventory() {
        try {
            console.log('üîÑ Envanter kontrol ediliyor...');
            
            // Tesla'nƒ±n envanter API'sine istek g√∂nder
            const currentUrl = window.location.href;
            const response = await fetch(currentUrl, {
                method: 'GET',
                headers: {
                    'Cache-Control': 'no-cache',
                    'Pragma': 'no-cache'
                }
            });
            
            if (response.ok) {
                const html = await response.text();
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                
                return this.checkForAvailableVehicles(doc);
            }
            
        } catch (error) {
            console.error('‚ùå Envanter kontrol√º hatasƒ±:', error);
            return false;
        }
    }
    
    // Mevcut ara√ßlarƒ± kontrol et
    checkForAvailableVehicles(doc = document) {
        // Tesla envanter sayfasƒ±ndaki ara√ß kartlarƒ±nƒ± bul
        const vehicleCards = doc.querySelectorAll('[data-testid="inventory-card"], .result-item, .vehicle-card');
        
        if (vehicleCards.length === 0) {
            // Alternatif selekt√∂rler dene
            const altSelectors = [
                '.inventory-results .result',
                '[class*="inventory"] [class*="card"]',
                '[class*="vehicle"] [class*="card"]',
                '.tds-grid-item',
                '[data-vehicle-id]'
            ];
            
            for (const selector of altSelectors) {
                const elements = doc.querySelectorAll(selector);
                if (elements.length > 0) {
                    console.log(`üìã ${elements.length} ara√ß bulundu (${selector})`);
                    return this.processVehicles(Array.from(elements));
                }
            }
            
            console.log('üì≠ Hi√ß ara√ß bulunamadƒ±');
            return false;
        }
        
        console.log(`üìã ${vehicleCards.length} ara√ß bulundu`);
        return this.processVehicles(Array.from(vehicleCards));
    }
    
    // Ara√ßlarƒ± i≈üle ve rezerve et
    processVehicles(vehicles) {
        let foundAvailable = false;
        
        vehicles.forEach((vehicle, index) => {
            const orderButton = vehicle.querySelector('button[data-testid="order-cta"], button[class*="order"], button[class*="reserve"], a[href*="order"]');
            const unavailableIndicator = vehicle.querySelector('[class*="unavailable"], [class*="sold"], [data-testid="unavailable"]');
            
            if (orderButton && !unavailableIndicator) {
                console.log(`üéØ M√ºsait ara√ß bulundu! (${index + 1})`);
                
                // Ara√ß detaylarƒ±nƒ± logla
                const modelInfo = vehicle.querySelector('[data-testid="model-name"], .model-name, h3, h4');
                const priceInfo = vehicle.querySelector('[data-testid="price"], .price, [class*="price"]');
                
                if (modelInfo) console.log(`üöó Model: ${modelInfo.textContent.trim()}`);
                if (priceInfo) console.log(`üí∞ Fiyat: ${priceInfo.textContent.trim()}`);
                
                // Rezervasyon i≈ülemini ba≈ülat
                setTimeout(() => this.attemptReservation(orderButton), 1000 + (index * 500));
                foundAvailable = true;
            }
        });
        
        return foundAvailable;
    }
    
    // Rezervasyon yapmayƒ± dene
    async attemptReservation(orderButton) {
        try {
            console.log('üéØ Rezervasyon i≈ülemi ba≈ülatƒ±lƒ±yor...');
            
            // Order butonuna tƒ±kla
            orderButton.click();
            
            // Kƒ±sa bekle ve form doldurma i≈ülemini ba≈ülat
            setTimeout(() => this.fillReservationForm(), 2000);
            
        } catch (error) {
            console.error('‚ùå Rezervasyon hatasƒ±:', error);
        }
    }
    
    // Rezervasyon formunu doldur
    async fillReservationForm() {
        try {
            console.log('üìù Form doldurma i≈ülemi ba≈ülatƒ±lƒ±yor...');
            
            // Formu bulmak i√ßin farklƒ± selekt√∂rler dene
            const formSelectors = [
                'form[data-testid="checkout-form"]',
                'form[class*="order"]',
                'form[class*="reservation"]',
                'form',
                '[data-testid="personal-info"]'
            ];
            
            let form = null;
            for (const selector of formSelectors) {
                form = document.querySelector(selector);
                if (form) break;
            }
            
            if (!form) {
                console.log('‚è≥ Form y√ºklenmesi bekleniyor...');
                setTimeout(() => this.fillReservationForm(), 2000);
                return;
            }
            
            // Form alanlarƒ±nƒ± doldur
            await this.fillFormFields(form);
            
        } catch (error) {
            console.error('‚ùå Form doldurma hatasƒ±:', error);
        }
    }
    
    // Form alanlarƒ±nƒ± doldur
    async fillFormFields(form) {
        const fieldMappings = [
            { selectors: ['input[name*="firstName"], input[data-testid*="first"], input[placeholder*="Ad"], input[placeholder*="First"]'], value: this.userInfo.firstName },
            { selectors: ['input[name*="lastName"], input[data-testid*="last"], input[placeholder*="Soyad"], input[placeholder*="Last"]'], value: this.userInfo.lastName },
            { selectors: ['input[type="email"], input[name*="email"], input[data-testid*="email"]'], value: this.userInfo.email },
            { selectors: ['input[type="tel"], input[name*="phone"], input[data-testid*="phone"], input[placeholder*="Telefon"]'], value: this.userInfo.phone },
            { selectors: ['input[name*="zip"], input[name*="postal"], input[data-testid*="zip"]'], value: this.userInfo.zipCode }
        ];
        
        for (const mapping of fieldMappings) {
            for (const selector of mapping.selectors) {
                const field = form.querySelector(selector);
                if (field && mapping.value) {
                    field.value = mapping.value;
                    field.dispatchEvent(new Event('input', { bubbles: true }));
                    field.dispatchEvent(new Event('change', { bubbles: true }));
                    console.log(`‚úÖ ${selector} alanƒ± dolduruldu`);
                    await new Promise(resolve => setTimeout(resolve, 300));
                    break;
                }
            }
        }
        
        // Submit butonunu bul ve tƒ±kla
        const submitButton = form.querySelector('button[type="submit"], button[data-testid*="submit"], button[class*="submit"], input[type="submit"]');
        if (submitButton && !submitButton.disabled) {
            console.log('üöÄ Rezervasyon g√∂nderiliyor...');
            await new Promise(resolve => setTimeout(resolve, 1000));
            submitButton.click();
            
            // Ba≈üarƒ± mesajƒ±nƒ± kontrol et
            setTimeout(() => this.checkReservationSuccess(), 3000);
        } else {
            console.log('‚ö†Ô∏è Submit butonu bulunamadƒ± veya deaktif');
        }
    }
    
    // Rezervasyon ba≈üarƒ±sƒ±nƒ± kontrol et
    checkReservationSuccess() {
        const successIndicators = [
            'Rezervasyon',
            'Ba≈üarƒ±lƒ±',
            'Success',
            'Confirmed',
            'Thank you',
            'Te≈üekk√ºr'
        ];
        
        const pageText = document.body.innerText;
        const isSuccess = successIndicators.some(indicator => 
            pageText.toLowerCase().includes(indicator.toLowerCase())
        );
        
        if (isSuccess) {
            console.log('üéâ RESERVASYON BA≈ûARILI! Bot durduruluyor...');
            this.stop();
            
            // Ses √ßƒ±kar (eƒüer m√ºmk√ºnse)
            try {
                const audio = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmAaAz2O1+7Rfz8NI3nM9Qg=');
                audio.play();
            } catch (e) {}
            
        } else {
            console.log('‚è≥ Rezervasyon durumu kontrol ediliyor...');
        }
    }
    
    // Botu ba≈ülat
    start() {
        if (this.isRunning) {
            console.log('‚ö†Ô∏è Bot zaten √ßalƒ±≈üƒ±yor!');
            return;
        }
        
        // Kullanƒ±cƒ± bilgilerini kontrol et
        const required = ['firstName', 'lastName', 'email', 'phone', 'zipCode'];
        const missing = required.filter(field => !this.userInfo[field]);
        
        if (missing.length > 0) {
            console.error('‚ùå Eksik kullanƒ±cƒ± bilgileri:', missing.join(', '));
            console.log('√ñnce setUserInfo() ile bilgilerinizi girin!');
            return;
        }
        
        this.isRunning = true;
        console.log('üöÄ Tesla Envanter Botu ba≈ülatƒ±ldƒ±!');
        console.log(`‚è∞ Her ${this.checkInterval / 1000} saniyede bir kontrol edilecek`);
        
        // ƒ∞lk kontrol√º hemen yap
        this.checkForAvailableVehicles();
        
        // Belirli aralƒ±klarla kontrol et
        this.intervalId = setInterval(() => {
            if (this.isRunning) {
                this.refreshInventory();
            }
        }, this.checkInterval);
    }
    
    // Botu durdur
    stop() {
        if (!this.isRunning) {
            console.log('‚ö†Ô∏è Bot zaten durmu≈ü!');
            return;
        }
        
        this.isRunning = false;
        if (this.intervalId) {
            clearInterval(this.intervalId);
            this.intervalId = null;
        }
        
        console.log('üõë Tesla Envanter Botu durduruldu!');
    }
    
    // Bot durumunu g√∂ster
    status() {
        console.log('üìä Bot Durumu:');
        console.log('√áalƒ±≈üƒ±yor:', this.isRunning ? '‚úÖ' : '‚ùå');
        console.log('Kontrol Aralƒ±ƒüƒ±:', `${this.checkInterval / 1000} saniye`);
        console.log('Kullanƒ±cƒ± Bilgileri:', this.userInfo);
    }
    
    // Kontrol aralƒ±ƒüƒ±nƒ± deƒüi≈ütir
    setInterval(seconds) {
        this.checkInterval = seconds * 1000;
        console.log(`‚è∞ Kontrol aralƒ±ƒüƒ± ${seconds} saniye olarak ayarlandƒ±`);
        
        if (this.isRunning) {
            this.stop();
            setTimeout(() => this.start(), 1000);
        }
    }
}

// Global bot instance olu≈ütur
window.teslaBot = new TeslaInventoryBot();

// Kƒ±sayol tanƒ±mla
window.bot = window.teslaBot;

// Kullanƒ±m talimatlarƒ±nƒ± g√∂ster
console.log(`
üöó TESLA ENVANTER BOTU KULLANIM REHBERƒ∞
=====================================

1Ô∏è‚É£ KULLANICI Bƒ∞LGƒ∞LERƒ∞Nƒ∞ Gƒ∞Rƒ∞N:
bot.setUserInfo({
    firstName: "Adƒ±nƒ±z",
    lastName: "Soyadƒ±nƒ±z", 
    email: "email@domain.com",
    phone: "5551234567",
    zipCode: "34000"
});

2Ô∏è‚É£ BOTU BA≈ûLATIN:
bot.start()

3Ô∏è‚É£ BOTU DURDURUN:
bot.stop()

4Ô∏è‚É£ Dƒ∞ƒûER KOMUTLAR:
bot.status()              // Bot durumunu g√∂ster
bot.setInterval(10)       // Kontrol aralƒ±ƒüƒ±nƒ± 10 saniye yap

‚ö†Ô∏è  √ñNEMLƒ∞ NOTLAR:
- Bu bot Tesla'nƒ±n resmi sitesinde kullanƒ±lmalƒ±dƒ±r
- Envanter sayfasƒ±nda √ßalƒ±≈ütƒ±rƒ±n
- Bot ara√ß bulduƒüunda otomatik rezerve edecektir
- ƒ∞nternet baƒülantƒ±nƒ±zƒ±n stabil olduƒüundan emin olun

üéØ BOT HAZIR! Yukarƒ±daki adƒ±mlarƒ± takip edin.
`);